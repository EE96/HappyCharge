{
  "service": {
    "service": "serverless-test",
    "serviceObject": {
      "name": "serverless-test"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs14.x",
      "region": "eu-west-2",
      "httpApi": {
        "cors": {
          "allowedOrigins": [
            "*"
          ],
          "allowedHeaders": [
            "Content-Type",
            "X-Amz-Date",
            "Authorization",
            "X-Api-Key",
            "X-Amz-Security-Token",
            "X-Amz-User-Agent",
            "access-token"
          ]
        }
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:GetItem"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:PutItem"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:UpdateItem"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "sns:Publish"
              ],
              "Resource": {
                "Ref": "ReportSubmittedTopic"
              }
            }
          ]
        }
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "HelloLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-test-dev-hello"
            }
          },
          "FetchChargeDeviceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-test-dev-fetchChargeDevice"
            }
          },
          "PutChargeDeviceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-test-dev-putChargeDevice"
            }
          },
          "ChargeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-test-dev-charge"
            }
          },
          "SignUpLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-test-dev-signUp"
            }
          },
          "MakeReportLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-test-dev-makeReport"
            }
          },
          "SendReportSubmittedEmailLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-test-dev-sendReportSubmittedEmail"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "serverless-test",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-test-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-test-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][2]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][3]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sqs:ReceiveMessage",
                          "sqs:DeleteMessage",
                          "sqs:GetQueueAttributes"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "ReportSubmittedQueue",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "ReportSubmittedDeadLetterQueue",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "serverless-test",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "HelloLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-test/dev/1663588809472-2022-09-19T12:00:09.472Z/serverless-test.zip"
              },
              "Handler": "endpoints/handlers.hello",
              "Runtime": "nodejs14.x",
              "FunctionName": "serverless-test-dev-hello",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HelloLogGroup"
            ]
          },
          "FetchChargeDeviceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-test/dev/1663588809472-2022-09-19T12:00:09.472Z/serverless-test.zip"
              },
              "Handler": "endpoints/fetchChargeDevice/lambda.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "serverless-test-dev-fetchChargeDevice",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "FetchChargeDeviceLogGroup"
            ]
          },
          "PutChargeDeviceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-test/dev/1663588809472-2022-09-19T12:00:09.472Z/serverless-test.zip"
              },
              "Handler": "endpoints/putChargeDevice/lambda.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "serverless-test-dev-putChargeDevice",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PutChargeDeviceLogGroup"
            ]
          },
          "ChargeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-test/dev/1663588809472-2022-09-19T12:00:09.472Z/serverless-test.zip"
              },
              "Handler": "endpoints/charge/lambda.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "serverless-test-dev-charge",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ChargeLogGroup"
            ]
          },
          "SignUpLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-test/dev/1663588809472-2022-09-19T12:00:09.472Z/serverless-test.zip"
              },
              "Handler": "endpoints/signUp/lambda.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "serverless-test-dev-signUp",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SignUpLogGroup"
            ]
          },
          "MakeReportLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-test/dev/1663588809472-2022-09-19T12:00:09.472Z/serverless-test.zip"
              },
              "Handler": "endpoints/makeReport/lambda.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "serverless-test-dev-makeReport",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "MakeReportLogGroup"
            ]
          },
          "SendReportSubmittedEmailLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-test/dev/1663588809472-2022-09-19T12:00:09.472Z/serverless-test.zip"
              },
              "Handler": "endpoints/sendReportSubmittedEmail/lambda.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "serverless-test-dev-sendReportSubmittedEmail",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SendReportSubmittedEmailLogGroup"
            ]
          },
          "HelloLambdaVersionBP4lCIMTWz171mfwplD0rrxPS0hEHcvyz7k8Zus8M": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HelloLambdaFunction"
              },
              "CodeSha256": "JpwEnEHz7DxPJQJQ5RLKLqNAnL51RoBnkrwJFyP/6vc="
            }
          },
          "FetchChargeDeviceLambdaVersionfUZgh81PFiggpGk2SCmD2Uteh9V2XMRAFkFn0x11ZM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "FetchChargeDeviceLambdaFunction"
              },
              "CodeSha256": "JpwEnEHz7DxPJQJQ5RLKLqNAnL51RoBnkrwJFyP/6vc="
            }
          },
          "PutChargeDeviceLambdaVersionDT4QHRkg27jwQmXM3rFbp7wNPQ4MZhD075N9kGfPJc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PutChargeDeviceLambdaFunction"
              },
              "CodeSha256": "JpwEnEHz7DxPJQJQ5RLKLqNAnL51RoBnkrwJFyP/6vc="
            }
          },
          "ChargeLambdaVersiong56OnV7riJPN3R23F5uTzz7MANdQbNr0AVHMMhfy8gc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ChargeLambdaFunction"
              },
              "CodeSha256": "JpwEnEHz7DxPJQJQ5RLKLqNAnL51RoBnkrwJFyP/6vc="
            }
          },
          "SignUpLambdaVersionzzOd2g70VWbe3svVP7xGmwoTfKI2aoK9trxUlvlDQvI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SignUpLambdaFunction"
              },
              "CodeSha256": "JpwEnEHz7DxPJQJQ5RLKLqNAnL51RoBnkrwJFyP/6vc="
            }
          },
          "MakeReportLambdaVersionHGWv7ZIcf74xSIErHyRRFuZaOagSX1BKyBE8P3yc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MakeReportLambdaFunction"
              },
              "CodeSha256": "JpwEnEHz7DxPJQJQ5RLKLqNAnL51RoBnkrwJFyP/6vc="
            }
          },
          "SendReportSubmittedEmailLambdaVersionok4NB6MDtC2clTKSPyWItH7iH6xSVIK4JWkpSlAMtg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SendReportSubmittedEmailLambdaFunction"
              },
              "CodeSha256": "JpwEnEHz7DxPJQJQ5RLKLqNAnL51RoBnkrwJFyP/6vc="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-serverless-test",
              "ProtocolType": "HTTP",
              "CorsConfiguration": {
                "AllowHeaders": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "access-token"
                ],
                "AllowMethods": [
                  "OPTIONS",
                  "GET",
                  "PUT",
                  "PATCH",
                  "POST"
                ],
                "AllowOrigins": [
                  "*"
                ]
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "HelloLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HelloLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationHello": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"HelloLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGet": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationHello"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationHello"
          },
          "FetchChargeDeviceLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "FetchChargeDeviceLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationFetchChargeDevice": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"FetchChargeDeviceLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRouteGetApiChargedevicesChargedeviceidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/chargeDevices/{chargeDeviceId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationFetchChargeDevice"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationFetchChargeDevice"
          },
          "PutChargeDeviceLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PutChargeDeviceLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationPutChargeDevice": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"PutChargeDeviceLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRoutePutApiChargedevices": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /api/chargeDevices",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationPutChargeDevice"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationPutChargeDevice"
          },
          "ChargeLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ChargeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCharge": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ChargeLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRoutePatchApiChargedevicesChargedeviceidVarCharge": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /api/chargeDevices/{chargeDeviceId}/charge",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCharge"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCharge"
          },
          "SignUpLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SignUpLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSignUp": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SignUpLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRoutePostApiSignDashup": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/sign-up",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSignUp"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSignUp"
          },
          "MakeReportLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "MakeReportLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationMakeReport": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"MakeReportLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRoutePostApiReport": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/report",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationMakeReport"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationMakeReport"
          },
          "Reports": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Reports",
              "AttributeDefinitions": [
                {
                  "AttributeName": "reportId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "reportId",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          },
          "ChargeDevices": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "ChargeDevices",
              "AttributeDefinitions": [
                {
                  "AttributeName": "chargeDeviceId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "chargeDeviceId",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 20,
                "WriteCapacityUnits": 20
              }
            }
          },
          "Users": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Users",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          },
          "ReportSubmittedTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
              "TopicName": "ReportSubmitted"
            }
          },
          "SendReportSubmittedEmailEventSourceMappingSQSReportSubmittedQueue": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "Properties": {
              "BatchSize": 1,
              "MaximumBatchingWindowInSeconds": 0,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "ReportSubmittedQueue",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "SendReportSubmittedEmailLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": "True"
            }
          },
          "ReportSubmittedDeadLetterQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "serverless-test-dev-SendReportSubmittedEmailReportSubmittedDeadLetterQueue"
            }
          },
          "ReportSubmittedQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "serverless-test-dev-SendReportSubmittedEmailReportSubmittedQueue",
              "RedrivePolicy": {
                "deadLetterTargetArn": {
                  "Fn::GetAtt": [
                    "ReportSubmittedDeadLetterQueue",
                    "Arn"
                  ]
                },
                "maxReceiveCount": 5
              }
            }
          },
          "ReportSubmittedQueuePolicy": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Id": "serverless-test-dev-SendReportSubmittedEmailReportSubmittedQueue",
                "Statement": [
                  {
                    "Sid": "serverless-test-dev-SendReportSubmittedEmailReportSubmittedSid",
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "sns.amazonaws.com"
                    },
                    "Action": "SQS:SendMessage",
                    "Resource": {
                      "Fn::GetAtt": [
                        "ReportSubmittedQueue",
                        "Arn"
                      ]
                    },
                    "Condition": {
                      "ArnEquals": {
                        "aws:SourceArn": [
                          {
                            "Ref": "ReportSubmittedTopic"
                          }
                        ]
                      }
                    }
                  }
                ]
              },
              "Queues": [
                {
                  "Ref": "ReportSubmittedQueue"
                }
              ]
            }
          },
          "SubscribeReportSubmittedTopic": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
              "Endpoint": {
                "Fn::GetAtt": [
                  "ReportSubmittedQueue",
                  "Arn"
                ]
              },
              "Protocol": "sqs",
              "TopicArn": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ReportSubmittedQueuePolicy\"][\"Properties\"][\"PolicyDocument\"][\"Statement\"][0][\"Condition\"][\"ArnEquals\"][\"aws:SourceArn\"][0]"
              },
              "RawMessageDelivery": false
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-serverless-test-dev-ServerlessDeploymentBucketName"
            }
          },
          "HelloLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HelloLambdaVersionBP4lCIMTWz171mfwplD0rrxPS0hEHcvyz7k8Zus8M"
            },
            "Export": {
              "Name": "sls-serverless-test-dev-HelloLambdaFunctionQualifiedArn"
            }
          },
          "FetchChargeDeviceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "FetchChargeDeviceLambdaVersionfUZgh81PFiggpGk2SCmD2Uteh9V2XMRAFkFn0x11ZM"
            },
            "Export": {
              "Name": "sls-serverless-test-dev-FetchChargeDeviceLambdaFunctionQualifiedArn"
            }
          },
          "PutChargeDeviceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PutChargeDeviceLambdaVersionDT4QHRkg27jwQmXM3rFbp7wNPQ4MZhD075N9kGfPJc"
            },
            "Export": {
              "Name": "sls-serverless-test-dev-PutChargeDeviceLambdaFunctionQualifiedArn"
            }
          },
          "ChargeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ChargeLambdaVersiong56OnV7riJPN3R23F5uTzz7MANdQbNr0AVHMMhfy8gc"
            },
            "Export": {
              "Name": "sls-serverless-test-dev-ChargeLambdaFunctionQualifiedArn"
            }
          },
          "SignUpLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SignUpLambdaVersionzzOd2g70VWbe3svVP7xGmwoTfKI2aoK9trxUlvlDQvI"
            },
            "Export": {
              "Name": "sls-serverless-test-dev-SignUpLambdaFunctionQualifiedArn"
            }
          },
          "MakeReportLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MakeReportLambdaVersionHGWv7ZIcf74xSIErHyRRFuZaOagSX1BKyBE8P3yc"
            },
            "Export": {
              "Name": "sls-serverless-test-dev-MakeReportLambdaFunctionQualifiedArn"
            }
          },
          "SendReportSubmittedEmailLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SendReportSubmittedEmailLambdaVersionok4NB6MDtC2clTKSPyWItH7iH6xSVIK4JWkpSlAMtg"
            },
            "Export": {
              "Name": "sls-serverless-test-dev-SendReportSubmittedEmailLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-serverless-test-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-serverless-test-dev-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "serverless-offline": {
        "httpPort": 3100
      }
    },
    "plugins": [
      "serverless-plugin-typescript",
      "serverless-offline",
      "@agiledigital/serverless-sns-sqs-lambda"
    ],
    "pluginsData": {},
    "functions": {
      "hello": {
        "handler": "endpoints/handlers.hello",
        "events": [
          {
            "httpApi": {
              "path": "/",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/"
          }
        ],
        "name": "serverless-test-dev-hello",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "HelloLambdaVersionBP4lCIMTWz171mfwplD0rrxPS0hEHcvyz7k8Zus8M"
      },
      "fetchChargeDevice": {
        "handler": "endpoints/fetchChargeDevice/lambda.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/chargeDevices/{chargeDeviceId}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/chargeDevices/{chargeDeviceId}"
          }
        ],
        "name": "serverless-test-dev-fetchChargeDevice",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "FetchChargeDeviceLambdaVersionfUZgh81PFiggpGk2SCmD2Uteh9V2XMRAFkFn0x11ZM"
      },
      "putChargeDevice": {
        "handler": "endpoints/putChargeDevice/lambda.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/chargeDevices",
              "method": "put"
            },
            "resolvedMethod": "PUT",
            "resolvedPath": "/api/chargeDevices"
          }
        ],
        "name": "serverless-test-dev-putChargeDevice",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "PutChargeDeviceLambdaVersionDT4QHRkg27jwQmXM3rFbp7wNPQ4MZhD075N9kGfPJc"
      },
      "charge": {
        "handler": "endpoints/charge/lambda.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/chargeDevices/{chargeDeviceId}/charge",
              "method": "patch"
            },
            "resolvedMethod": "PATCH",
            "resolvedPath": "/api/chargeDevices/{chargeDeviceId}/charge"
          }
        ],
        "name": "serverless-test-dev-charge",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ChargeLambdaVersiong56OnV7riJPN3R23F5uTzz7MANdQbNr0AVHMMhfy8gc"
      },
      "signUp": {
        "handler": "endpoints/signUp/lambda.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/sign-up",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/sign-up"
          }
        ],
        "name": "serverless-test-dev-signUp",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "SignUpLambdaVersionzzOd2g70VWbe3svVP7xGmwoTfKI2aoK9trxUlvlDQvI"
      },
      "makeReport": {
        "handler": "endpoints/makeReport/lambda.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/report",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/report"
          }
        ],
        "name": "serverless-test-dev-makeReport",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "MakeReportLambdaVersionHGWv7ZIcf74xSIErHyRRFuZaOagSX1BKyBE8P3yc"
      },
      "sendReportSubmittedEmail": {
        "handler": "endpoints/sendReportSubmittedEmail/lambda.handler",
        "events": [
          {
            "snsSqs": {
              "name": "ReportSubmitted",
              "topicArn": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ReportSubmittedQueuePolicy\"][\"Properties\"][\"PolicyDocument\"][\"Statement\"][0][\"Condition\"][\"ArnEquals\"][\"aws:SourceArn\"][0]"
              },
              "batchSize": 1
            }
          }
        ],
        "name": "serverless-test-dev-sendReportSubmittedEmail",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "patterns": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "SendReportSubmittedEmailLambdaVersionok4NB6MDtC2clTKSPyWItH7iH6xSVIK4JWkpSlAMtg"
      }
    },
    "resources": {
      "Resources": {
        "Reports": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "Reports",
            "AttributeDefinitions": [
              {
                "AttributeName": "reportId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "reportId",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        },
        "ChargeDevices": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "ChargeDevices",
            "AttributeDefinitions": [
              {
                "AttributeName": "chargeDeviceId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "chargeDeviceId",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 20,
              "WriteCapacityUnits": 20
            }
          }
        },
        "Users": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "Users",
            "AttributeDefinitions": [
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "userId",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        },
        "ReportSubmittedTopic": {
          "Type": "AWS::SNS::Topic",
          "Properties": {
            "TopicName": "ReportSubmitted"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "serverless-test",
      "frameworkVersion": "3",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "C:\\Users\\elija\\Workspace\\HappyCharge\\HappyCharge\\backend\\.build\\.serverless\\serverless-test.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/serverless-test/dev/1663588809472-2022-09-19T12:00:09.472Z",
    "artifact": "serverless-test.zip"
  }
}